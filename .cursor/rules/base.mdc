---
description: 
globs: 
alwaysApply: true
---
1. Стиль и структура кода
1.1. HTML
Семантическая верстка:
Используйте семантические теги (например, <header>, <nav>, <main>, <section>, <footer>) для повышения доступности и SEO.

Минимализм и валидность:
Пишите минимальный, но валидный HTML-код. Обязательно используйте стандартный <!DOCTYPE html> и корректные атрибуты (например, lang на теге <html>).

Доступность (Accessibility):
Обеспечьте правильное использование атрибутов alt для изображений, добавляйте ARIA-метки и семантические описания для улучшения поддержки ассистивных технологий.

1.2. CSS
Модульность и переиспользуемость:
Используйте методологии, такие как BEM, для именования классов, чтобы облегчить поддержку и масштабирование стилей.

Адаптивность:
Внедряйте медиазапросы, флексбоксы или гриды для создания адаптивных интерфейсов. Применяйте мобильный first подход.

Минификация и пререндеринг:
По возможности подключайте сборщики стилей для автоматической минификации CSS и устранения неиспользуемых классов.

1.3. JavaScript
Модульность и чистота кода:
Организуйте скрипты в виде модулей или используйте системы модульности (например, ES6-модули). Избегайте загрязнения глобального пространства имен.

Обработка ошибок и отладка:
Включайте обработку ошибок (try/catch) для предотвращения сбоев, а также регистрируйте ошибки для последующей диагностики.

Строгий режим и линтинг:
Используйте 'use strict'; для повышения безопасности и надежности кода. Интегрируйте ESLint или аналогичные инструменты для проверки синтаксиса и стиля.

2. Архитектура и организация проекта
2.1. Разделение ответственности
Четкое разделение слоев:
Разделите структуру (HTML), стили (CSS) и логику (JavaScript) — это повышает читаемость и облегчает поддержку.

Организация файлов:
Соблюдайте консистентную структуру папок, где, например, assets/ хранит стили и скрипты, а components/ — переиспользуемые блоки интерфейса.

2.2. Использование шаблонизаторов и препроцессоров
HTML-шаблоны:
Если проект масштабный, рассмотрите использование шаблонизаторов (например, Pug) для упрощения генерации HTML с повторно используемыми компонентами.

CSS-препроцессоры:
Применяйте Sass или Less для облегчения написания и поддержки стилей, сохраняя итоговый CSS-код минимальным.

2.3. Интеграция с системами сборки и CI/CD
Автоматизация сборки:
Настройте сборщики (Webpack, Rollup, Parcel) для объединения, минификации и оптимизации HTML, CSS и JavaScript файлов.

Непрерывная интеграция:
Внедрите автоматическое тестирование (юнит-тесты для JavaScript, проверка валидности HTML/CSS) и код-ревью, чтобы ошибки обнаруживались до деплоя.

3. Документирование и комментарии
3.1. Комментарии в коде
Ключевые участки:
Пишите поясняющие комментарии в нестандартных или сложных участках кода. Комментарии должны описывать не только «что» происходит, но и «почему» принимается то или иное решение.

Docstrings и JSDoc:
Для JavaScript используйте JSDoc (или аналогичные инструменты) для документирования функций и модулей, чтобы облегчить поддержку и автодополнение в IDE.

3.2. README и документация проекта
Описание проекта:
В корне репозитория разместите подробное README, описывающее архитектуру проекта, используемые инструменты сборки и правила кодирования.

Стандарты и гайдлайны:
Документируйте стандартные правила (например, соглашения по именованию, линтеры) в отдельном документе, доступном для всей команды.

4. Безопасность и производительность
4.1. Безопасная обработка данных
Валидация и санитация:
Всегда проверяйте и очищайте входные данные как на стороне клиента, так и на сервере. Используйте современные практики предотвращения XSS, CSRF и SQL-инъекций.

Безопасное взаимодействие с API:
Применяйте токенизацию, OAuth и HTTPS для защиты данных при обмене информацией с серверными API.

4.2. Оптимизация производительности
Асинхронная загрузка и кэширование:
Организуйте ленивую загрузку изображений и скриптов, используйте кэширование и CDN для повышения скорости загрузки страниц.

Минификация и бандлинг:
Объединяйте и минифицируйте ресурсы для сокращения количества HTTP-запросов и уменьшения размера загружаемых файлов.