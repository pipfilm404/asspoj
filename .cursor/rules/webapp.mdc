---
description: 
globs: 
alwaysApply: true
---
1. Архитектура приложения
Одностраничное приложение (SPA):
Приложение должно работать на одной HTML-странице, где все изменения контента происходят динамически без перезагрузки страницы. Для управления состоянием рекомендуется использовать модульный JavaScript (например, ES6-модули или библиотеку вроде React/Preact, если хотите использовать UI-фреймворк, но с минимальной нагрузкой).

Структура проекта:
Разделите код на следующие логические блоки:

UI и навигация: модули для рендеринга контента главной страницы, экрана выбора оборудования и экрана показа QR-кода.

Логика загрузки данных: модуль для асинхронной загрузки JSON-файлов (с описанием состава поезда) с отображением статуса загрузки.

QR-код генерация: модуль для формирования QR-кода по заданной логике (рекомендуется использовать легковесную библиотеку, например, qrcode.js).

Размещение на GitHub Pages:
Создайте репозиторий с публичным доступом, настройте ветку (обычно gh-pages или настройте раздел «Pages» в репозитории), и убедитесь, что все статические файлы (HTML, CSS, JS, JSON, изображения) доступны для раздачи через GitHub Pages.

2. UI/UX и дизайн
Вдохновение от Apple, Microsoft и Google:

Чистый, минималистичный интерфейс с акцентом на белое пространство и простые линии.

Использование современных плоских и материала-дизайн принципов: простая цветовая палитра, плавные анимации, отзывчивость (responsive design).

Понятная типографика, большое значение — удобочитаемость и гармония всех элементов.

Основные экраны:

2.1. Main-страница (выбор состава)
Интерактивный инпут:
Пользователь вводит название состава (поезда) в текстовое поле. При фокусе или клике открывается выпадающий список с вариантами, загружаемыми из JSON.

Минимализм формы:
Дизайн должен быть чистым и ненавязчивым, а также адаптироваться под мобильные устройства.

2.2. Экран выбора оборудования
Кнопки навигации:
После выбора состава и загрузки соответствующего JSON, пользователь переходит на страницу с четырьмя кнопками:

«Подвагонное оборудование»

«Салонное оборудование»

«Кабина»

«Вернуться назад»

Индикация загрузки:
Перед показом экрана — промежуточное состояние загрузки (анимированная иконка или простой текст «Загрузка данных…»).

2.3. Экран генерации QR-кода
Элементы страницы:

Кнопка «Назад» в выбор оборудования: для возврата к экрану выбора.

QR-код: сгенерированный по определённой логике на основе загруженного JSON.

Информация о составе: отображается вагон состава, тип оборудования и метка (например, «ЭП2Д-008102», «*КП1-КП2 пр. 3N70»).

Навигация по меткам: кнопки «назад», «вперёд» для перемещения между метками.

Авто-режим: кнопка, активирующая автопрокрутку меток каждые 15 секунд. Визуальное отображение таймера — обводка, которая заполняется по часовой стрелке.

3. Функциональная логика и рабочий процесс
Начальный экран и выбор состава:

Пользователь видит главный экран с инпутом.

При клике на инпут происходит автодополнение/отображение выпадающего списка, данные которого считываются из заранее подготовленного JSON-списка (например, trains.json).

Загрузка данных:

После выбора состава запускается асинхронный запрос за JSON-данными конкретного состава.

Отобразите промежуточное сообщение (или индикатор) «Загрузка данных…», пока файл не загружен.

Экран выбора оборудования:

После загрузки данных пользователь переходит на экран с четырьмя кнопками.

Кнопка «Вернуться назад» позволяет вернуться к выбору состава.

Генерация и навигация по меткам:

При выборе одной из кнопок («Подвагонное оборудование», «Салонное оборудование», «Кабина») система переходит на страницу показа QR-кода.

Отображаемые данные:

QR-код, сформированный по логике из JSON (передача нужных данных на вход генератора QR).

Информация о вагоне, типе оборудования и метке.

Навигация:

Кнопки «Назад» (в выбор оборудования) и навигация между метками («Назад», «Вперёд»).

Автоматическое переключение меток: при включении авто-режима каждые 15 секунд меняется текущая метка, а визуальный таймер (обводка, движущаяся по кругу) отображает оставшееся время.

Механизм переключения состояний:

Применяйте централизованное управление состоянием (например, с использованием паттерна «стейт-машина»), чтобы легко переключаться между разными экранами без перезагрузки страницы.

Обновление DOM должно происходить минимально – изменяйте только видимые элементы, сохраняя структуру и общие стили.

4. Технологический стек и лучшие практики
HTML/CSS/JS:
Используйте современные стандарты HTML5 и CSS3. Стили пишите с акцентом на модульность (например, методология BEM) и адаптивность (медиазапросы, flexbox/grid).

Асинхронные запросы:
Для работы с JSON используйте современный API fetch с поддержкой промисов, а также обработку ошибок (try/catch).

QR-код генерация:
Интегрируйте небольшую стороннюю библиотеку для генерации QR-кодов, которая позволит вам получать визуальное представление QR в canvas или svg.

Анимации и визуальные эффекты:
Применяйте CSS-анимации для плавного переключения состояний (например, анимация для таймера в авто-режиме).

Оптимизация:
Минифицируйте CSS и JS, используйте сборщики (например, Webpack или Parcel) для оптимальной сборки проекта.

Деплой на GitHub Pages:
Проверьте корректность относительных путей, так как GitHub Pages может требовать корректировки для корректного отображения всех ресурсов.